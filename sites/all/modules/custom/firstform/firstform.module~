<?php

/**
 * @file
 * Play with the Form API
 */

/**
 * Implements hook_menu
 */
function firstform_menu(){
  $items['firstform'] = array(
    'title' => 'View the sample form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('firstform_nameform'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * Define a form
 */
function firstform_nameform(){
  $form['name'] = array(
    '#title' => t('Your Name'),
    '#type' => 'fieldset',
    '#description' => t('What people call you.')
  );
  $form['name']['user_name'] = array(
    '#title' => t('Your Name'),
    '#type' => 'textfield',
    '#description' => t('Please enter your name.')
  );
  $form['color'] = array(
    '#prefix' => '<hr />',
    '#title' => t('Color'),
    '#type' => 'fieldset',
    '#suffix' => '<div class="privacy-warning">' .
    t('This information will be displayed publicly!') . '</div>',
    '#theme' => 'firstform_coloredfieldset'
  );
  $form['color_options'] = array(
    '#type' => 'value',
    '#value' => array(t('red'), t('green'), t('blue'))
  );
  $form['color']['favorite_color'] = array(
    '#title' => t('Favorite Color'),
    '#type' => 'select',
    '#description' => t('Please select your favorite color.'),
    '#options' => $form['color_options']['#value']
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  $form['#tree'] = TRUE;
  $form['#theme'] = 'firstform_alternate_nameform';
return $form;
}

/**
 * Validate the form
 */
function firstform_nameform_validate($form, &$form_state){
  if($form_state['values']['name']['user_name'] == 'King Kong'){
    //We notify the Field API that this field has failed Validation
    form_set_error('user_name', t('King Kong is not allowed to use this form.'));
  }
}

/**
 * Handle post-validation form submission
 */
function firstform_nameform_submit($form, &$form_state){
  $name = $form_state['values']['name']['user_name'];
  $color_key = $form_state['values']['color']['favorite_color'];
  $color = $form_state['values']['color_options'][$color_key];
  drupal_set_message(t('%name loves the color %color!',
    array('%name' => $name, '%color' => $color)));
}

/**
* Implements hook_theme().
*/
function firstform_theme() {
  return array(
    'firstform_nameform' => array(
      'render element' => 'form',
      'template' => 'firstform-nameform',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function firstform_forms($form_id, $args) {
  $forms['firstform_special'] = array(
    'callback' => 'firstform_nameform');
  return $forms;
}

/**
* Assign the elements of the form to variables so
* the themer can use those values to control how the
* form elements are displayed, or alternatively
* displaying the whole form as constructed above.
*/
function template_preprocess_firstform_nameform(&$variables) {
  $variables['firstform_nameform'] = array();
  $hidden = array();
  // Provide variables named after form keys so themers can print each element independently.
  foreach (element_children($variables['form']) as $key) {
    $type = $variables['form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    else {
      $variables['firstform_nameform'][$key] = drupal_render($variables['form'][$key]);
    }
  }
  // Hidden form elements have no value to themers. No need for separation.
  $variables['firstform_nameform']['hidden'] = implode($hidden);
  // Collect all form elements to make it easier to print the whole form.
  $variables['firstform_nameform_form'] = implode($variables['firstform_nameform']);
}
